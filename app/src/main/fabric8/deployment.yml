metadata:
  name: ${project.artifactId}
spec:
  replicas: 1
  strategy:
    rollingParams:
      timeoutSeconds: 10800
    type: Rolling
  template:
    metadata:
      annotations:
        pod.beta.kubernetes.io/init-containers: |-
            [
              {
                "name": "envvar-substitution",
                "image": "fabric8/envsubst-file:1.0.0",
                "imagePullPolicy": "IfNotPresent",
                "args": [
                  "openfact-sync-config.yml"
                ],
                "env": [
                  {
                    "name": "OPENFACT_SMTP_HOST",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "openfact-sync",
                        "key": "smtp.host"
                      }
                    }
                  },
                  {
                    "name": "OPENFACT_SMTP_PORT",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "openfact-sync",
                        "key": "smtp.port"
                      }
                    }
                  },
                  {
                    "name": "OPENFACT_SMTP_FROM",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "openfact-sync",
                        "key": "smtp.from"
                      }
                    }
                  },
                  {
                    "name": "OPENFACT_SMTP_SSL",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "openfact-sync",
                        "key": "smtp.ssl"
                      }
                    }
                  },
                  {
                    "name": "OPENFACT_SMTP_STARTTLS",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "openfact-sync",
                        "key": "smtp.starttls"
                      }
                    }
                  },
                  {
                    "name": "OPENFACT_SMTP_AUTH",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "openfact-sync",
                        "key": "smtp.auth"
                      }
                    }
                  },
                  {
                    "name": "OPENFACT_SMTP_USER",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "openfact-sync",
                        "key": "smtp.user"
                      }
                    }
                  },
                  {
                    "name": "OPENFACT_SMTP_PASSWORD",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "openfact-sync",
                        "key": "smtp.password"
                      }
                    }
                  }
                ],
                "volumeMounts": [
                  {
                    "name": "openfact-sync-config",
                    "mountPath": "/workdir/openfact-sync-config.yml",
                    "subPath": "config/openfact-sync-config.yml"
                  },
                  {
                    "name": "openfact-sync-subst-config",
                    "mountPath": "/processed"
                  }
                ]
              }
            ]
    spec:
      containers:
      - env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: JAVA_APP_DIR
          value: /deployments
        - name: SSO_AUTH_SERVER_URL
          value: ${SSO_AUTH_SERVER_URL}
        - name: JAVA_OPTIONS
          value: -Dsso.realm=${SSO_REALM} -Dsso.auth.server.url=${SSO_AUTH_SERVER_URL} -Dsso.clientId=${SSO_CLIENT_ID} -Dsso.credentials.secret=${SSO_CREDENTIALS_SECRET} -Dswarm.project.stage=production
        - name: DB_DRIVER_NAME
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: db.driver
        - name: DB_CONNECTION_URL
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: db.url
        - name: DB_USER_NAME
          valueFrom:
            secretKeyRef:
              name: ${project.artifactId}
              key: db.user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${project.artifactId}
              key: db.password
        - name: HIBERNATE_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: hibernate.strategy
        - name: HIBERNATE_SHOW_SQL
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: hibernate.show_sql
        - name: HIBERNATE_FORMAT_SQL
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: hibernate.format_sql
        - name: HIBERNATE_SECOND_LEVEL_CACHE
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: hibernate.second_level_cache
        - name: ES_HOST
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: es.url
        - name: ES_USER
          valueFrom:
            secretKeyRef:
              name: ${project.artifactId}
              key: es.user
        - name: ES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${project.artifactId}
              key: es.password
        - name: ES_INDEX_SCHEMA_MANAGEMENT_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: es.index_strategy
        - name: ES_REQUIRED_INDEX_STATUS
          valueFrom:
            configMapKeyRef:
              name: ${project.artifactId}
              key: es.required_index_status
        name: ${project.artifactId}
        image: ${project.artifactId}:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        securityContext:
          privileged: false
        volumeMounts:
        - name: openfact-sync-subst-config
          mountPath: /deployments/stages
      volumes:
      - name: openfact-sync-subst-config
        emptyDir: {}
      - name: openfact-sync-config
        configMap:
          name: openfact-sync
          items:
          - key: openfact-sync-config.yml
            path: config/openfact-sync-config.yml
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - ${project.artifactId}
      from:
        kind: ImageStreamTag
        name: ${project.artifactId}:latest
    type: ImageChange
